{"ast":null,"code":"import { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from \"../constant/userConstant\";\nimport Axios from \"axios\";\nimport Cookie from 'js-cookie';\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"http://localhost:8002/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"http://localhost:8002/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["/home/root1/Desktop/Demo-project/client/src/actions/userAction.js"],"names":["USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","Axios","Cookie","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","put","headers","Authorization","token","set","JSON","stringify","error","message","signin","post","register","logout","remove"],"mappings":"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","sourcesContent":["import { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS} from \"../constant/userConstant\";\n\n\nimport Axios from \"axios\";\nimport Cookie from 'js-cookie';\nconst update = ({ userId, name, email, password }) => async (dispatch, getState) => {\n  const { userSignin: { userInfo } } = getState();\n  dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n  try {\n    const { data } = await Axios.put(\"/api/users/\" + userId,\n      { name, email, password }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n  }\n}\n\nconst signin = (email, password) => async (dispatch) => {\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n  try {\n    const { data } = await Axios.post(\"http://localhost:8002/api/users/signin\", { email, password });\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n  }\n}\n\nconst register = (name, email, password) => async (dispatch) => {\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } });\n  try {\n    const { data } = await Axios.post(\"http://localhost:8002/api/users/register\", { name, email, password });\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\n  }\n}\n\nconst logout = () => (dispatch) => {\n  Cookie.remove(\"userInfo\");\n  dispatch({ type: USER_LOGOUT })\n}\nexport { signin, register, logout,update};"]},"metadata":{},"sourceType":"module"}